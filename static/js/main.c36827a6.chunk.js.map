{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","inputRef","useRef","handleClick","e","concat","target","name","backspace","slice","clear","calculate","eval","toFixed","error","useEffect","current","focus","className","type","value","ref","readOnly","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wxBAGA,SAASA,MACP,cAA4BC,oDAAS,IAArC,iIAAOC,OAAP,cAAeC,UAAf,cACMC,SAAWC,kDAAO,MAIxB,SAASC,YAAYC,GACnBJ,UAAUD,OAAOM,OAAOD,EAAEE,OAAOC,OAGnC,SAASC,YACPR,UAAUD,OAAOU,MAAM,GAAI,IAG7B,SAASC,QACPV,UAAU,IAGZ,SAASW,YACP,IACEX,UAAUY,KAAKb,QAAQc,QAAQ,IAC/B,MAAOC,OACPd,UAAU,KAId,OAtBAe,sDAAU,kBAAMd,SAASe,QAAQC,WAuB/B,mEAAKC,UAAU,WAAf,UACE,4EACE,oEAAOC,KAAK,OAAOC,MAAOrB,OAAQsB,IAAKpB,SAAUqB,UAAQ,MAG3D,mEAAKJ,UAAU,SAAf,UACE,qEAAQK,GAAG,QAAQC,QAASd,MAA5B,mBAGA,qEAAQa,GAAG,YAAYC,QAAShB,UAAhC,eAGA,qEAAQD,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,kBAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQI,KAAK,IAAIiB,QAASrB,YAA1B,eAGA,qEAAQoB,GAAG,SAASC,QAASb,UAA7B,qBAQOd,2B,iICnFA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvC,EAAA,EAAD,MAEFwC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c36827a6.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n  const inputRef = useRef(null);\n\n  useEffect(() => inputRef.current.focus());\n\n  function handleClick(e) {\n    setResult(result.concat(e.target.name));\n  }\n\n  function backspace() {\n    setResult(result.slice(0, -1));\n  }\n\n  function clear() {\n    setResult(\"\");\n  }\n\n  function calculate() {\n    try {\n      setResult(eval(result).toFixed(2));\n    } catch (error) {\n      setResult(\"\");\n    }\n  }\n\n  return (\n    <div className=\"calc-app\">\n      <from>\n        <input type=\"text\" value={result} ref={inputRef} readOnly />\n      </from>\n\n      <div className=\"keypad\">\n        <button id=\"clear\" onClick={clear}>\n          Clear\n        </button>\n        <button id=\"backspace\" onClick={backspace}>\n          C\n        </button>\n        <button name=\"+\" onClick={handleClick}>\n          +\n        </button>\n        <button name=\"7\" onClick={handleClick}>\n          7\n        </button>\n        <button name=\"8\" onClick={handleClick}>\n          8\n        </button>\n        <button name=\"9\" onClick={handleClick}>\n          9\n        </button>\n        <button name=\"-\" onClick={handleClick}>\n          -\n        </button>\n        <button name=\"4\" onClick={handleClick}>\n          4\n        </button>\n        <button name=\"5\" onClick={handleClick}>\n          5\n        </button>\n        <button name=\"6\" onClick={handleClick}>\n          6\n        </button>\n        <button name=\"*\" onClick={handleClick}>\n          &times;\n        </button>\n        <button name=\"1\" onClick={handleClick}>\n          1\n        </button>\n        <button name=\"2\" onClick={handleClick}>\n          2\n        </button>\n        <button name=\"3\" onClick={handleClick}>\n          3\n        </button>\n        <button name=\"/\" onClick={handleClick}>\n          /\n        </button>\n        <button name=\"0\" onClick={handleClick}>\n          0\n        </button>\n        <button name=\".\" onClick={handleClick}>\n          .\n        </button>\n        <button id=\"result\" onClick={calculate}>\n          =\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}